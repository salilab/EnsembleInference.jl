var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EnsembleInference","category":"page"},{"location":"#EnsembleInference","page":"Home","title":"EnsembleInference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EnsembleInference]","category":"page"},{"location":"#EnsembleInference.DiffusionNormal","page":"Home","title":"EnsembleInference.DiffusionNormal","text":"DiffusionNormal{Tμ,TΣ,Te,TB,TD,TM<:Manifolds.AbstractGroupManifold} <:\nManifolds.MPointDistribution{TM}\n\nConstructor\n\nDiffusionNormal(\n    M::Manifolds.AbstractGroupManifold,\n    μ,\n    Σ,\n    e = Manifolds.identity(M, μ),\n    basis = Manifolds.DefaultOrthogonalBasis(),\n    direction = Manifolds.LeftAction()\n)\n\nConstruct a DiffusionNormal distribution on a group manifold M, with points represented with the same type as the identity element e, which may be user-specified. The mode of the distribution is at μ, and Σ is a diffusion matrix applied to the coordinates of the Lie algebra 𝔪 = Tₑ M using the orthogonal basis.\n\n\n\n\n\n","category":"type"},{"location":"#EnsembleInference.DiracDelta","page":"Home","title":"EnsembleInference.DiracDelta","text":"DiracDelta{T,TM<:Manifolds.Manifold} <: Manifolds.MPointDistribution{TM}\n\nDirac distribution around a point p, that is, a distribution whose support is a single point p on a manifold M.\n\nConstructor\n\nDiracDelta(M::Manifold, p)\n\n\n\n\n\n","category":"type"},{"location":"#EnsembleInference.Haar","page":"Home","title":"EnsembleInference.Haar","text":"Haar{T,TM<:Manifolds.AbstractGroupManifold} <: Manifolds.MPointDistribution{TM}\n\nHaar (invariant, i.e. uniform) measure on group manifold M.\n\nConstructor\n\nHaar(M::AbstractGroupManifold, p)\n\nConstructs a Haar distribution on the group manifold M with points represented like the provided point p, used for random sampling when implemented for compact groups.\n\n\n\n\n\n","category":"type"},{"location":"#EnsembleInference.expv-Tuple{Any,Any,Any}","page":"Home","title":"EnsembleInference.expv","text":"expv(t::Number, A, b::AbstractVecOrMat; solver::ODESolver = Tsit5(), kwargs...)\n\nCompute the action of the matrix exponential, u(t) = exp(t * A) * b, by solving the differential equation u = A u with initial condition u(0)=b.\n\nThe solution is computed using OrdinaryDiffEq.solve with the provided solver. Remaining kwargs are passed to OrdinaryDiffEq.solve. The same solver and keywords are used to compute the pullback when using a ChainRules-compatible automatic differentiation package.\n\n\n\n\n\n","category":"method"},{"location":"#EnsembleInference.inversion","page":"Home","title":"EnsembleInference.inversion","text":"inversion(d::Distribution)\n\nGiven a distribution d of elements g  G, where G is a group, the inversion of d is the corresponding distribution of g^-1.\n\n\n\n\n\n","category":"function"}]
}
